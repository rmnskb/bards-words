services:
  mongodb:
    # Access mongosh from inside the container: docker exec -it mongodb mongosh
    container_name: mongodb
    image: mongo:8.0.6
    env_file: .env
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 5
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
    ports:
      - 27017:27017
    volumes:
      - "./db:/data/db:rw"
    networks:
      - web-ntwrk

  fast-api:
    container_name: fast-api
    image: ghcr.io/rmnskb/bards-words-api
    env_file: .env
    environment:
      DB_API_USER: ${DB_API_USER}
      DB_API_PWD: ${DB_API_PWD}
      HOST: ${HOST}
      MONGODB_PORT: ${MONGODB_PORT}
    volumes:
      - ./api:/api
    expose:
      - "80"
    restart: on-failure
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/api/v1/health"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 15s
    networks:
      - web-ntwrk

  react-ts:
    container_name: react-ts
    image: ghcr.io/rmnskb/bards-words-frontend
    restart: on-failure
    volumes: 
      - react-app:/app:rw
    networks:
      - web-ntwrk

  nginx:
    container_name: nginx
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
      - react-app:/app:ro
    volumes_from:
      - react-ts
    depends_on:
      - react-ts
      - fast-api
    restart: unless-stopped
    command: '/bin/sh -c ''while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g "daemon off;"'''
    networks:
      - web-ntwrk

  certbot:
    container_name: certbot
    image: certbot/certbot
    restart: unless-stopped
    volumes:
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
    networks:
      - web-ntwrk

volumes:
  db:
    driver: local
    name: db
  react-app:

networks:
  web-ntwrk:
    name: web-ntwrk
    driver: bridge
